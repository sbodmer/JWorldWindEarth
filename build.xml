<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<!-- By default, only the Clean and Build commands use this build script. -->
<!-- Commands such as Run, Debug, and Test only use this build script if -->
<!-- the Compile on Save feature is turned off for the project. -->
<!-- You can turn off the Compile on Save (or Deploy on Save) setting -->
<!-- in the project's Project Properties dialog box.-->
<project name="WorldWindEarth" default="default" basedir=".">
    <description>Builds, tests, and runs the project WorldWindEarth.</description>
    <import file="nbproject/build-impl.xml"/>
    <!--

    There exist several targets which are by default empty and which can be 
    used for execution of your tasks. These targets are usually executed 
    before and after some main targets. They are: 

      -pre-init:                 called before initialization of project properties
      -post-init:                called after initialization of project properties
      -pre-compile:              called before javac compilation
      -post-compile:             called after javac compilation
      -pre-compile-single:       called before javac compilation of single file
      -post-compile-single:      called after javac compilation of single file
      -pre-compile-test:         called before javac compilation of JUnit tests
      -post-compile-test:        called after javac compilation of JUnit tests
      -pre-compile-test-single:  called before javac compilation of single JUnit test
      -post-compile-test-single: called after javac compilation of single JUunit test
      -pre-jar:                  called before JAR building
      -post-jar:                 called after JAR building
      -post-clean:               called after cleaning build products

    (Targets beginning with '-' are not intended to be called on their own.)

    Example of inserting an obfuscator after compilation could look like this:

        <target name="-post-compile">
            <obfuscate>
                <fileset dir="${build.classes.dir}"/>
            </obfuscate>
        </target>

    For list of available properties check the imported 
    nbproject/build-impl.xml file. 


    Another way to customize the build is by overriding existing main targets.
    The targets of interest are: 

      -init-macrodef-javac:     defines macro for javac compilation
      -init-macrodef-junit:     defines macro for junit execution
      -init-macrodef-debug:     defines macro for class debugging
      -init-macrodef-java:      defines macro for class execution
      -do-jar:                  JAR building
      run:                      execution of project 
      -javadoc-build:           Javadoc generation
      test-report:              JUnit report generation

    An example of overriding the target for project execution could look like this:

        <target name="run" depends="WorldWindEarth-impl.jar">
            <exec dir="bin" executable="launcher.exe">
                <arg file="${dist.jar}"/>
            </exec>
        </target>

    Notice that the overridden target depends on the jar target and not only on 
    the compile target as the regular run target does. Again, for a list of available 
    properties which you can use, check the target you are overriding in the
    nbproject/build-impl.xml file. 

    -->
    
    <target name="-pre-compile">
        <antcall target="update_libs"/>
        
    </target>
    
    <target name="-post-jar" description="Create all jars">
        <antcall target="create_jars"/>
        <antcall target="wwlayersonly"/>
        <antcall target="copy_libs"/>
    </target>
    
    <target name="create_jars">
        <echo message="Creating stand alone jars and main libraries"/>
        
        <echo message="[App] WorldWindEarth"/>
        <jar destfile="${dist.dir}/WWEarth.jar" manifest="Manifests/WWEarth.mf">
            <fileset dir="${build.dir}/classes" includes="app/**"/>
        </jar>
        
        <mkdir dir="${dist.dir}/lib/ext"/>
        <echo message="[Desktop] WorldWindEarth main frame and panels"/>
        <jar destfile="${dist.dir}/lib/ext/worldwindearth.jar" manifest="Manifests/worldwindearth.mf">
            <fileset dir="${build.dir}/classes" includes="org/worldwindearth/**"/>
            <fileset dir="${build.dir}/classes" includes="osm/**"/>
        </jar>
        
        <!-- Layers -->
        <mkdir dir="${dist.dir}/lib/ext/layers"/>
        <echo message="[Layer] Blue Marble NG"/>
        <jar destfile="${dist.dir}/lib/ext/layers/BMNG.jar" manifest="Manifests/layers/BMNG.mf">
            <fileset dir="${build.dir}/classes" includes="gov/nasa/bmng/**"/>
        </jar>
        <echo message="[Layer] Stars"/>
        <jar destfile="${dist.dir}/lib/ext/layers/Stars.jar" manifest="Manifests/layers/Stars.mf">
            <fileset dir="${build.dir}/classes" includes="gov/nasa/stars/**"/>
        </jar>
        <echo message="[Layer] Landsat"/>
        <jar destfile="${dist.dir}/lib/ext/layers/Landsat.jar" manifest="Manifests/layers/Landsat.mf">
            <fileset dir="${build.dir}/classes" includes="gov/nasa/landsat/**"/>
        </jar>
        <echo message="[Layer] Earth at night"/>
        <jar destfile="${dist.dir}/lib/ext/layers/EarthAtNight.jar" manifest="Manifests/layers/EarthAtNight.mf">
            <fileset dir="${build.dir}/classes" includes="gov/nasa/earthatnight/**"/>
        </jar>
        <echo message="[Layer] Sky gradient"/>
        <jar destfile="${dist.dir}/lib/ext/layers/SkyGradient.jar" manifest="Manifests/layers/SkyGradient.mf">
            <fileset dir="${build.dir}/classes" includes="gov/nasa/skygradient/**"/>
        </jar>
        <echo message="[Layer] Atmosphere"/>
        <jar destfile="${dist.dir}/lib/ext/layers/Atmosphere.jar" manifest="Manifests/layers/Atmosphere.mf">
            <fileset dir="${build.dir}/classes" includes="gov/nasa/atmosphere/**"/>
        </jar>
        <echo message="[Layer] Fog"/>
        <jar destfile="${dist.dir}/lib/ext/layers/Fog.jar" manifest="Manifests/layers/Fog.mf">
            <fileset dir="${build.dir}/classes" includes="gov/nasa/fog/**"/>
        </jar>
        
        <echo message="[Layer] Bing (NASA)"/>
        <jar destfile="${dist.dir}/lib/ext/layers/Bing.jar" manifest="Manifests/layers/Bing.mf">
            <fileset dir="${build.dir}/classes" includes="gov/nasa/bing/**"/>
        </jar>
        <echo message="[Layer] Openstreetmap (NASA)"/>
        <jar destfile="${dist.dir}/lib/ext/layers/Openstreetmap.jar" manifest="Manifests/layers/Openstreetmap.mf">
            <fileset dir="${build.dir}/classes" includes="gov/nasa/openstreetmap/**"/>
        </jar>
        <echo message="[Layer] Countries"/>
        <jar destfile="${dist.dir}/lib/ext/layers/Countries.jar" manifest="Manifests/layers/Countries.mf">
            <fileset dir="${build.dir}/classes" includes="gov/nasa/countries/**"/>
        </jar>
        <echo message="[Layer] Crosshair"/>
        <jar destfile="${dist.dir}/lib/ext/layers/Crosshair.jar" manifest="Manifests/layers/Crosshair.mf">
            <fileset dir="${build.dir}/classes" includes="gov/nasa/crosshair/**"/>
        </jar>
        <echo message="[Layer] Placenames"/>
        <jar destfile="${dist.dir}/lib/ext/layers/Placenames.jar" manifest="Manifests/layers/Placenames.mf">
            <fileset dir="${build.dir}/classes" includes="gov/nasa/placenames/**"/>
        </jar>
        <echo message="[Layer] Openstreetmap (Mapnik)"/>
        <jar destfile="${dist.dir}/lib/ext/layers/OSMMapnik.jar" manifest="Manifests/layers/OSMMapnik.mf">
            <fileset dir="${build.dir}/classes" includes="gov/nasa/osmmapnik/**"/>
        </jar>
        <echo message="[Layer] Microsoft Virtualearth"/>
        <jar destfile="${dist.dir}/lib/ext/layers/Virtualearth.jar" manifest="Manifests/layers/Virtualearth.mf">
            <fileset dir="${build.dir}/classes" includes="org/microsoft/virtualearth/**"/>
        </jar>
        <echo message="[Layer] Lat Lon Graticule"/>
        <jar destfile="${dist.dir}/lib/ext/layers/LatLonGraticule.jar" manifest="Manifests/layers/LatLonGraticule.mf">
            <fileset dir="${build.dir}/classes" includes="gov/nasa/latlongraticule/**"/>
        </jar>
        <echo message="[Layer] Ground cursor"/>
        <jar destfile="${dist.dir}/lib/ext/layers/GroundCursor.jar" manifest="Manifests/layers/GroundCursor.mf">
            <fileset dir="${build.dir}/classes" includes="org/worldwindearth/groundcursor/**"/>
        </jar>
        <echo message="[Layer] Scale"/>
        <jar destfile="${dist.dir}/lib/ext/layers/Scale.jar" manifest="Manifests/layers/Scale.mf">
            <fileset dir="${build.dir}/classes" includes="gov/nasa/scale/**"/>
        </jar>
        <echo message="[Layer] Worldmap"/>
        <jar destfile="${dist.dir}/lib/ext/layers/Worldmap.jar" manifest="Manifests/layers/Worldmap.mf">
            <fileset dir="${build.dir}/classes" includes="gov/nasa/worldmap/**"/>
        </jar>
        <echo message="[Layer] Compass"/>
        <jar destfile="${dist.dir}/lib/ext/layers/Compass.jar" manifest="Manifests/layers/Compass.mf">
            <fileset dir="${build.dir}/classes" includes="gov/nasa/compass/**"/>
        </jar>
        <echo message="[Layer] Viewcontrols"/>
        <jar destfile="${dist.dir}/lib/ext/layers/ViewControls.jar" manifest="Manifests/layers/ViewControls.mf">
            <fileset dir="${build.dir}/classes" includes="gov/nasa/viewcontrols/**"/>
        </jar>
        <echo message="[Layer] WMS"/>
        <jar destfile="${dist.dir}/lib/ext/layers/WMS.jar" manifest="Manifests/layers/WMS.mf">
            <fileset dir="${build.dir}/classes" includes="gov/nasa/wms/**"/>
        </jar>
        <echo message="[Layer] OSM"/>
        <jar destfile="${dist.dir}/lib/ext/layers/OSM.jar" manifest="Manifests/layers/OSM.mf">
            <fileset dir="${build.dir}/classes" includes="org/osm/**"/>
        </jar>
        <echo message="[Layer] OSMBuildings"/>
        <jar destfile="${dist.dir}/lib/ext/layers/OSMBuildings.jar" manifest="Manifests/layers/OSMBuildings.mf">
            <fileset dir="${build.dir}/classes" includes="org/osmbuildings/**"/>
        </jar>
        <echo message="[Layer] Buildings"/>
        <jar destfile="${dist.dir}/lib/ext/layers/DefaultBuildings.jar" manifest="Manifests/layers/DefaultBuildings.mf">
            <fileset dir="${build.dir}/classes" includes="org/defaultbuildings/**"/>
        </jar>
        
        <echo message="[Layer] Models"/>
        <jar destfile="${dist.dir}/lib/ext/layers/Models.jar" manifest="Manifests/layers/Models.mf">
            <fileset dir="${build.dir}/classes" includes="org/worldwindearth/models/**"/>
        </jar>
        <!--
        <echo message="[Layer] PaysDeBrest"/>
        <jar destfile="${dist.dir}/lib/ext/layers/PaysDeBrest.jar" manifest="Manifests/layers/PaysDeBrest.mf">
            <fileset dir="${build.dir}/classes" includes="fr/paysdebrest/**"/>
        </jar>
        -->
        <echo message="[Layer] Geocode"/>
        <jar destfile="${dist.dir}/lib/ext/layers/Geocode.jar" manifest="Manifests/layers/Geocode.mf">
            <fileset dir="${build.dir}/classes" includes="org/worldwindearth/geocode/**"/>
        </jar>
        <echo message="[Layer] Trek"/>
        <jar destfile="${dist.dir}/lib/ext/layers/Trek.jar" manifest="Manifests/layers/Trek.mf">
            <fileset dir="${build.dir}/classes" includes="org/worldwindearth/trek/**"/>
        </jar>
        
        <!-- Geocode -->
        <mkdir dir="${dist.dir}/lib/ext/geocode"/>
        <echo message="[Geocode] Nominatim"/>
        <jar destfile="${dist.dir}/lib/ext/geocode/Nominatim.jar" manifest="Manifests/geocode/Nominatim.mf">
            <fileset dir="${build.dir}/classes" includes="org/nominatim/**"/>
        </jar>
        <echo message="[Geocode] Geonames"/>
        <jar destfile="${dist.dir}/lib/ext/geocode/Geonames.jar" manifest="Manifests/geocode/Geonames.mf">
            <fileset dir="${build.dir}/classes" includes="org/geonames/**"/>
        </jar>
        <echo message="[Geocode] Yahoo"/>
        <jar destfile="${dist.dir}/lib/ext/geocode/Yahoo.jar" manifest="Manifests/geocode/Yahoo.mf">
            <fileset dir="${build.dir}/classes" includes="gov/nasa/yahoo/search/**"/>
            <fileset dir="${build.dir}/classes" includes="gov/nasa/yahoo/Resources/"/>
        </jar>
        <echo message="[Geocode] Photon"/>
        <jar destfile="${dist.dir}/lib/ext/geocode/Photon.jar" manifest="Manifests/geocode/Photon.mf">
            <fileset dir="${build.dir}/classes" includes="de/komoot/photon/**"/>
        </jar>
    </target>
    
    <target name="copy_libs">
        <echo message="Copy libs to dist"/>
        <copy todir="${dist.dir}/lib">
            <fileset file="lib/tinyrcp.jar"/>
            <fileset file="lib/worldwind220/gdal.jar"/>
            <fileset file="lib/worldwind220/gluegen-*.jar"/>
            <fileset file="lib/worldwind220/jogl-*.jar"/>
            <fileset file="lib/worldwind220/vpf-symbols.jar"/>
        </copy>
        <mkdir dir="${dist.dir}/lib/ext"/>
        <copy todir="${dist.dir}/lib/ext">
            <fileset file="lib/worldwind220/WorldWindJava.jar"/>
        </copy>
        <copy todir="${dist.dir}/lib/ext">
            <fileset file="lib/WorldWindObj.jar"/>
        </copy>
        <copy todir="${dist.dir}/lib/ext">
            <fileset file="lib/osmapi/osmapi-3.1.jar"/>
            <fileset file="lib/osmapi/signpost-core-1.2.1.2.jar"/>
            <fileset file="lib/osmapi/xmlpull-xpp3-1.1.4c.jar"/>
        </copy>
        <copy todir="${dist.dir}/lib/ext">
            <fileset file="lib/gson/gson-2.8.6-SNAPSHOT.jar"/>
        </copy>
        <copy todir="${dist.dir}/lib/ext">
            <fileset file="lib/geogson/geogson-core-1.4-SNAPHOT.jar"/>
            <fileset file="lib/geogson/geogson-jts-1.4-SNAPHOT.jar"/>
        </copy>
        <copy todir="${dist.dir}/lib/ext">
            <fileset file="lib/Osmb.jar"/>
        </copy>
        <copy todir="${dist.dir}/lib/ext">
            <fileset file="lib/flatlaf.jar"/>
            <fileset file="lib/flatlaf-extras.jar"/>
            <fileset file="lib/jsvg.jar"/>
        </copy>
    </target>
    
    <target name="wwlayersonly">
        <echo message="Creating stand alone jars of only world wind layers"/>
        
        <echo message="[WorldWindLayer] OSMBuildings"/>
        <mkdir dir="${dist.dir}/dist"/>
        <jar destfile="${dist.dir}/dist/OSMBuildings.jar">
            <fileset dir="${build.dir}/classes" includes="org/osmbuildings/OSMBuildingsLayer*"/>
            <fileset dir="${build.dir}/classes" includes="org/osmbuildings/OSMBuildingsRenderable*"/>
            <fileset dir="${build.dir}/classes" includes="org/osmbuildings/OSMBuildingsTile*"/>
            <fileset dir="${build.dir}/classes" includes="org/osmbuildings/GeoJSONEntry*"/>        
            <fileset dir="${build.dir}/classes" includes="org/osmbuildings/Resources/"/>        
        </jar>
        <echo message="[WorldWindLayer] Buildings"/>
        <mkdir dir="${dist.dir}/dist"/>
        <jar destfile="${dist.dir}/dist/Buildings.jar">
            <fileset dir="${build.dir}/classes" includes="org/buildings/BuildingsLayer*"/>
            <!--
            <fileset dir="${build.dir}/classes" includes="org/buildings/OSMBuildingsRenderable*"/>
            <fileset dir="${build.dir}/classes" includes="org/buildings/OSMBuildingsTile*"/>
            <fileset dir="${build.dir}/classes" includes="org/buildings/GeoJSONEntry*"/>        
            -->
            <fileset dir="${build.dir}/classes" includes="org/buildings/Resources/"/>        
        </jar>
        <echo message="[WorldWindLayer] GroudCursor"/>
        <mkdir dir="${dist.dir}/dist"/>
        <jar destfile="${dist.dir}/dist/GroundCursor.jar">
            <fileset dir="${build.dir}/classes" includes="org/worldwindearth/groundcursor/GroundCursorLayer*"/>
            <fileset dir="${build.dir}/classes" includes="org/worldwindearth/groundcursor/Resources/"/>        
        </jar>
    </target>
    
    <!-- If the TinyRCP,SOMuildingsTileServer project is available use it to get the latest version -->
    <target name="update_libs" description="Update depedencies libs">
        <echo message="Update libs from TinyRCP project"/>
        <copy failonerror="false" todir="lib" overwrite="true">
            <fileset file="../TinyRCP/dist/tinyrcp.jar"/>
        </copy>
        <echo message="Update libs from WorldWindObj project"/>
        <copy failonerror="false" todir="lib" overwrite="true">
            <fileset file="../WorldWindObj/dist/WorldWindObj.jar"/>
        </copy>
        <echo message="Update libs from OSMBuildingsTileServer project"/>
        <copy failonerror="false" todir="lib" overwrite="true">
            <fileset file="../OSMBuildingsTileServer/dist/Osmb.jar"/>
        </copy>
        <echo message="Update libs from WorldWind project"/>
        <copy failonerror="false" todir="lib/worldwind220" overwrite="true">
            <fileset file="../WorldWindJava/dist/WorldWindJava.jar"/>
        </copy>
    </target>
    
    
    <!--          -->
    <!-- Packages -->
    <!--          -->
    <!--
    <target name="package_jworldwindearth_debian" depends="-init-project" description="Build debian jworldwindearth package">
        <echo message="[deb] Create jworldwindearth package for platform ${platform}"/>
        <delete dir="Releases/Packages/deb" />       
                        
        <echo message="[deb] Create source tarball"/>
        <mkdir dir="Releases/Packages/deb/jworldwindearth-${version}-src" />
        <copy todir="Releases/Packages/deb/jworldwindearth-${version}-src/src" overwrite="true" preservelastmodified="true">
            <fileset dir="src" />
        </copy>
        <copy todir="Releases/Packages/deb/jworldwindearth-${version}-src" overwrite="true" preservelastmodified="true">
            <fileset file="build.xml" />
        </copy>
        <copy todir="Releases/Packages/deb/jworldwindearth-${version}-src" overwrite="true" preservelastmodified="true">
            <fileset file="build.xml" />
        </copy>
        <mkdir dir="Releases/Packages/deb/jworldwindearth-${version}-src/nbproject" />
        <copy todir="Releases/Packages/deb/jworldwindearth-${version}-src/nbproject" overwrite="true" preservelastmodified="true">
            <fileset file="nbproject/project.properties" />
            <fileset file="nbproject/build-impl.xml" />
        </copy>
        <mkdir dir="Releases/Packages/deb/jworldwindearth-${version}-src/lib" />
        <copy todir="Releases/Packages/deb/jworldwindearth-${version}-src/lib" overwrite="true" preservelastmodified="true">
            <fileset dir="lib" />
        </copy>
        <mkdir dir="Releases/Packages/deb/jworldwindearth-${version}-src/Manifests" />
        <copy todir="Releases/Packages/deb/jworldwindearth-${version}-src/Manifests" overwrite="true" preservelastmodified="true">
            <fileset dir="Manifests" />
        </copy>
        <mkdir dir="Releases/Packages/deb/jworldwindearth-${version}" />
        <tar basedir="Releases/Packages/deb/jworldwindearth-${version}-src" destfile="Releases/Packages/deb/jworldwindearth_${version}.orig.tar.gz" compression="gzip" />   
        <delete dir="Releases/Packages/deb/jworldwindearth-${version}-src"/>
    
        <echo message="[deb] Preparing package"/>
        <mkdir dir="Releases/Packages/deb/jworldwindearth-${version}/debian" />
        <copy todir="Releases/Packages/deb/jworldwindearth-${version}/debian" overwrite="true">
            <fileset dir="Packages/deb/debian"/>
        </copy>
        
        
        <mkdir dir="Releases/Packages/deb/jworldwindearth-${version}/lib" />
        <copy todir="Releases/Packages/deb/jworldwindearth-${version}/lib" overwrite="true">
            <fileset dir="lib"/>
        </copy>
        <mkdir dir="Releases/Packages/deb/jworldwindearth-${version}/Manifests" />
        <copy todir="Releases/Packages/deb/jworldwindearth-${version}/Manifests" overwrite="true">
            <fileset dir="Manifests"/>
        </copy>
               
        <mkdir dir="Releases/Packages/deb/jworldwindearth-${version}/bin" />
        <copy todir="Releases/Packages/deb/jworldwindearth-${version}/bin" overwrite="true">
            <fileset dir="bin/amd64"/>
        </copy>
        <copy todir="Releases/Packages/deb/jworldwindearth-${version}" overwrite="true">
            <fileset dir="Packages/deb/desktop"/>
        </copy>
        
        <echo message="[deb] Building .deb package"/>
        <exec executable="debuild" dir="Releases/Packages/deb/jworldwindearth-${version}/debian">
            <arg value="-us"/>
            <arg value="-uc"/>
        </exec> 
    </target>
    -->
    
    <target name="exe_jworldwindearth" depends="-init-project" description="Build windows exe jworldwindearth archive">
        <echo message="[exe] Create jworldwindearth windows executable with launch4j"/>
        <exec executable="${launch4j}" dir=".">
            <arg value="Packages/exe/jworldwindearth/jworldwindearth.xml"/>    
        </exec>
        <mkdir dir="Releases/Windows/JWorldWindEarth"/>
        <move file="Packages/exe/jworldwindearth/JWorldWindEarth.exe" tofile="Releases/Windows/JWorldWindEarth/JWorldWindEarth.exe"/>
        <mkdir dir="Releases/Windows/JWorldWindEarth/lib"/>
        <copy todir="Releases/Windows/JWorldWindEarth/lib">
            <fileset dir="dist/lib"/>  
        </copy>
        <copy todir="Releases/Windows/JWorldWindEarth">
            <fileset file="dist/WWEarth.jar"/>
        </copy>
        <zip destfile="Releases/Windows/JWorldWindEarth_${version}.zip" basedir="Releases/Windows/JWorldWindEarth" update="true"/>
    </target>
    
    <target name="package_jworldwindearth" depends="-init-project" description="Build debian jworldwindearth package">
        <!-- Platform -->
        <echo message="[deb] Create jworldwindearth binary package for platform ${platform}"/>
        <delete dir="${dist.dir}/Packages/jworldwindearth-${version}"/>
		  <mkdir dir="${dist.dir}/Packages/jworldwindearth-${version}/DEBIAN"/>
		  <copy todir="${dist.dir}/Packages/jworldwindearth-${version}" overwrite="true">
				<fileset dir="Packages/deb/jworldwindearth"/>
		  </copy>
		  <chmod file="${dist.dir}/Packages/jworldwindearth-${version}/usr/bin/jworldwindearth" perm="uog+x"/>
		  <chmod file="${dist.dir}/Packages/jworldwindearth-${version}/DEBIAN/postinst" perm="ugo+x" />
		  <chmod file="${dist.dir}/Packages/jworldwindearth-${version}/DEBIAN/preinst" perm="ugo+x" />
		  <mkdir dir="${dist.dir}/Packages/jworldwindearth-${version}/usr/share/jworldwindearth"/>
		  <copy todir="${dist.dir}/Packages/jworldwindearth-${version}/usr/share/jworldwindearth">
				<fileset file="${dist.dir}/WWEarth.jar" />
		  </copy>
        <mkdir dir="${dist.dir}/Packages/jworldwindearth-${version}/usr/share/jworldwindearth/lib"/>
        <copy todir="${dist.dir}/Packages/jworldwindearth-${version}/usr/share/jworldwindearth/lib">
				<fileset dir="${dist.dir}/lib" />
		  </copy>
        
        <exec executable="fakeroot" dir="${dist.dir}/Packages">
				<arg value="dpkg-deb"/>
				<arg value="--build"/>
				<arg value="jworldwindearth-${version}"/>
		  </exec>
		  <mkdir dir="Releases/Packages"/>
		  <move file="${dist.dir}/Packages/jworldwindearth-${version}.deb" tofile="Releases/Packages/jworldwindearth-${version}_all.deb"/>
        
    </target>
    
</project>
