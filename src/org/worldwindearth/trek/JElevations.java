/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package org.worldwindearth.trek;

import gov.nasa.worldwind.geom.Position;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.util.ArrayList;

/**
 *
 * @author sbodmer
 */
public class JElevations extends javax.swing.JPanel {
    /**
     * The list of elevation
     */
    ArrayList<Double> elevations = new ArrayList<>();
    
    double low = 10000;
    double high = -10000;
    int highlight = -1;
    
    /**
     * Difference of elevations
     */
    int diff = 0;
    
    /**
     * Display the elevation curve
     * 
     * Creates new form JElevations
     */
    public JElevations() {
        initComponents();
    }

    //**************************************************************************
    //*** API
    //**************************************************************************
    public void setElevations(ArrayList<Double> elevations) {
        this.elevations = elevations;
        this.diff = 0;
        
        double last = 0;
        for (int i=0;i<elevations.size();i++) {
            double e = elevations.get(i);
            if (e < low) low = e;
            if (e > high) high = e;
            diff += Math.abs(e-last);
            last = e;
        }
        repaint();
    }
    
    /**
     * If -1, no higlight
     * 
     * @param index 
     */
    public void highlight(int index) {
        this.highlight = index;
        repaint();
    }
    
    /**
     * Get the cumul of the elevation difference
     * 
     * @return 
     */
    public double getDiff() {
        return diff;
    }
    
    public double getHighest() {
        return high;
    }
    
    public double getLowest() {
        return low;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(java.awt.Color.white);
        setForeground(java.awt.Color.black);
        setFont(new java.awt.Font("Monospaced", 0, 10)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        
        g.drawString(""+high, 0, 10);
        g.drawString(""+low, 0, getHeight());
        if (elevations.isEmpty()) return;
        
        double delta = high-low;
        double dx = (double) getWidth()/ (double) elevations.size();
        
        int x[] = new int[elevations.size()];
        int y[] = new int[elevations.size()];
        for (int i=0;i<elevations.size();i++) {
            int ele = (int) (elevations.get(i).intValue()-low);
            x[i] = (int) (i*dx);
            y[i] = getHeight() - (int) ((getHeight()*ele)/delta);
            // System.out.println(""+x[i]+","+y[i]);
        }
        g.setColor(Color.BLUE);
        g.drawPolyline(x, y, elevations.size());
        
        if (highlight != -1) {
            g.setColor(Color.RED);
            g.drawLine((int) (highlight*dx), 0, (int) (highlight*dx), getHeight());
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
